// -* mode: js -*-

// InvalidType
// ** typecheck: expect TypeError **
now => @org.thingpedia.invalid.get() => notify;

====

// InvalidType2
// ** typecheck: expect TypeError **
now => @org.thingpedia.invalid2.get() => notify;

====

// InvalidType3
// ** typecheck: expect TypeError **
now => @org.thingpedia.builtin.test.invalid() => notify;

====

// Array
monitor @com.twitter.home_timeline(), in_array(author, ["alice"^^tt:username, "bob"^^tt:username])  => notify;

====

// TestExternalPredicate
{
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
monitor @com.twitter.home_timeline(), text =~ "lol" && @org.thingpedia.builtin.thingengine.builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
}

====

// ** typecheck: expect TypeError **
// these should not typecheck
// TestInvalidExternalPredicate1
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { time =~ "lol" } => notify;

====

// ** typecheck: expect TypeError **
// TestInvalidExternalPredicate2
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { lol =~ "lol" } => notify;

====

// ** typecheck: expect TypeError **
// TestInvalidExternalPredicate3
monitor @com.twitter.home_timeline(), @com.twitter.post() { text =~ "lol" } => notify;

====

executor = "bob"^^tt:username : { // TestReturn
    monitor @com.twitter.home_timeline() => return;
}

====

executor = self : { // ExplicitSelf
    now => @org.thingpedia.builtin.thingengine.builtin.say(message="lol");
}

====

executor = "matrix-account:@gcampax:matrix.org"^^tt:contact : { // WithPrincipals
    now => @org.thingpedia.builtin.thingengine.builtin.say(message="lol");
}

====

// CompareDate
{
    now => @org.thingpedia.builtin.thingengine.builtin.get_time(), time >= makeTime(10,0) => notify;
}

====

// StartsWith
{
    monitor @com.twitter.home_timeline(), starts_with(text, "foo") => notify;
}

====

// EntityNames
{
    now => @com.twitter.post_picture(caption="lol", picture_url="http://foo.com/bar.jpg"^^tt:picture("A funny picture"));
}

====

// DownCast
{
    monitor @com.xkcd(id="com.xkcd-6").get_comic()
    => @com.twitter.post(status=picture_url);
}

====

// EventType
{
    monitor @com.twitter.home_timeline() => @org.thingpedia.builtin.thingengine.builtin.say(message=$event.type);
}

====

// FormatEvent
{
    monitor @com.twitter.home_timeline() => @org.thingpedia.builtin.thingengine.builtin.say(message=$event);
}

====

// ComplexFilter
{
    monitor @com.twitter.home_timeline(), text =~ "foo" || (text =~"bar" && !(text =~ "lol")) => notify;
}

====

// WithClassDef
{
    class @dyn_0 extends @remote {
        action send(in req foo : String);
    }
    now => @dyn_0.send(foo="foo");
}

====

// ** typecheck: expect TypeError **
// WrongClassDef
{
    class @dyn_0 extends @remote {
        action send(in req foo : Number);
    }
    now => @dyn_0.send(foo="foo");
}
====

// without wrapping it should still work

monitor @com.twitter.home_timeline() => notify;

====

// same for immediates
now => @security-camera.current_event() => notify;

====

// PrimaryKind
monitor @com.twitter.home_timeline() => notify;

====

// Contains
{
    monitor @com.twitter.home_timeline(), contains(hashtags, "lol") => notify;
}

====

// ParameterPassing
{
    monitor @com.xkcd(id="com.xkcd-6").get_comic()
    => @com.twitter(id="com.twitter-foo").post_picture(caption=title, picture_url=picture_url);
}

====

// SecurityCamera
    now => @security-camera.current_event() => notify;

====

// SearchYoutube
    now => @com.youtube.search_videos(query="lol"), video_url == "http://www.youtube.com"^^tt:url =>  notify;

====

// TimeTest
{
    attimer(time=makeTime(12, 30)) => notify;
}

====

// PhoneNumberTest
{
    now => @org.thingpedia.builtin.thingengine.phone.send_sms(to="+15555555555", message="");
    now => @org.thingpedia.builtin.thingengine.phone.send_sms(to="+15555555555"^^tt:phone_number, message="");
    monitor @org.thingpedia.builtin.thingengine.phone.sms(), sender=="+15555555555"^^tt:phone_number => notify;
}

====

// ** typecheck: expect TypeError **
// InvalidPhoneNumberTest
    now => @org.thingpedia.builtin.thingengine.phone.send_sms(to="+15555555555"^^tt:email_address, message="");

====

// LocationAsTriggerParam
    monitor @org.thingpedia.weather.current(location=makeLocation(1, 3)) => notify;

====

// RelativeLocation
    monitor @org.thingpedia.weather.current(location=$context.location.current_location) => notify;

====

// LocationWithDisplayAsTriggerParam
    monitor @org.thingpedia.weather.current(location=makeLocation(1, 3, "Somewhere"))  => notify;

====

// SabrinaGeneratedMonitorcom.twitter
{
    monitor @com.twitter(id="com.twitter-foo").home_timeline(), author == "HillaryClinton"^^tt:username => notify;
}

====

// CommandTest
  now => @org.thingpedia.builtin.thingengine.builtin.say(message="test");

====

// LogQueryTest
    now => t => notify;

====

// LogQueryTestProjection
    now => [col1] of Q1 => notify;

====

// LogQueryTestSelection
    now => [col1] of (Q1, col2 >= 42) => notify;

/* select col1 as v_1 from Q1 where col2 >= 42 */

====

// LogQueryTestJoin
{
  now => ([col1] of Q1 join Q2), col2 >= col1 => notify;
  now => [col2] of (([col1] of Q1 join Q2), col2 >= col1) => notify;
}

====

// LogQueryAggregationTest
now => aggregate max field of Q1 => notify;

====

// LogQueryAggregationMeasureTest
// col1 has type Measure(C)
{
now => aggregate max col1 of Q3 => @thermostat.set_target_temperature(value=col1);
now => (aggregate max col1 of Q3) as tmp => @thermostat.set_target_temperature(value=tmp.col1);
}

====

// ** typecheck: expect TypeError **
// LogQueryInvalidAggregationTest
now => aggregate max nonexisting_field of Q1 => notify;

====

// ** typecheck: expect TypeError **
// LogQueryInvalidAggregation2Test
now => aggregate max str1 of Q1 => notify;

====

// LogQueryCountTest
now => aggregate count of Q1 => notify;

====

// LogQueryCountParamPassingTest
now => aggregate count str1 of Q1 join @com.xkcd.get_comic() on (number=str1) => notify;

====

// ** typecheck: expect TypeError **
// LogQueryCountInvalidParamPassingTest
now => aggregate count str1 of Q1 => @com.twitter.post(status=count);

====

// LogQueryArgmTest
{
now => [field1, field2] of aggregate argmax 1,1 another_field of Q0 => notify;
now => [field1, field2] of aggregate argmax 1,3 another_field of Q0 => notify;
}

====

// ** typecheck: expect TypeError **
// LogQueryInvalidArgmTest
now => [field1, field2] of aggregate argmax 1,1 nonexisting_field of Q0 => notify;

====

// WithSave
{
let table steps    := @edu.stanford.rakeshr1.fitbit.getsteps();
let table my_table := aggregate max steps of Q1;
now => my_table => notify;
}

====

// LogTriggerTest
monitor Q1 join Q2 => notify;

====

// Another LogTriggerTest
monitor Q1 => Q2 => notify;

====

// Another LogTriggerTest
monitor Q1 => Q2 => @com.twitter.post(status="hello");

====

// LogTriggerAggregationTest
monitor (aggregate max field of Q1) => notify;

====

// LogTriggerArgmTest
monitor ([field1, field2] of aggregate argmax 1,1 another_field of Q0) => notify;

====

// LogTestAll
let stream saved := [foo] of (monitor Q0 join Q1);

====

// LogTestTableName
let stream lol := [foo] of (monitor Q0 join Q1);

====

// RelativeTime
{
now => Q1, _timestamp >= makeDate() + 2year => notify;
now => Q1, _timestamp >= makeDate() + -2year => notify;
now => Q1, _timestamp >= makeDate() - 2year => notify;
now => Q1, _timestamp >= makeDate() + 24mon => notify;
now => Q1, _timestamp >= makeDate() + (-1year + -12mon) => notify;
now => Q1, _timestamp >= start_of(mon) && _timestamp <= end_of(day) => notify;
}

====

// Lambdas
{
let table macro := \(p_number : Number) -> @com.xkcd.get_comic(number=p_number) ;
now => macro(p_number=1234) => notify;
}

====

// EdgeFilter
{
let stream once := \(x : Stream) -> edge x on (true) ;

edge (monitor @thermostat.get_temperature()) on value >= 70F => notify;
}

====

// Window
{
let table A := window 1, 3 of timer(base=makeDate(), interval=10min);
let table B := timeseries makeDate(), -1week of timer(base=makeDate(), interval=10min);
let table C := sequence 1, 3 of Q1;
let table D := history start_of(week), -1week of Q1;

let table this_week := \(x : Table) -> history end_of(week), -1week of x;
let table last_week := \(x : Table) -> history start_of(week), -1week of x;
let table current := \(x : Table) -> sequence 1,1 of x;
let table previous := \(x : Table) -> sequence 2,1 of x;
let table latest_K := \(x : Table, k : Number) -> sequence 1, k of x;
}

====

// ** typecheck: expect TypeError **
// Table x doesn't have field score. Maybe fix this later.
// Argmaxes
{
let table gold_medal := \(x : Table) -> aggregate argmax 1, 1 score of x ;
let table silver_medal := \(x : Table) -> aggregate argmax 2,1 score of x ;

let table top_K := \(x : Any, k : Number) -> aggregate argmax 1,k score of x ;

let table bottom_K := \(x : Any, k : Number) -> aggregate argmin 1,k score of x ;
now => gold_medal(x=Q4) => notify;

}

====

// Computation
{
let table x := compute distance(location, makeLocation(1,2)) of @org.thingpedia.builtin.thingengine.phone.get_gps();
let table y := compute distance(location, $context.location.home) of @org.thingpedia.builtin.thingengine.phone.get_gps();
let table z := compute (col1 + col2) of Q1;
let table xx := compute (1 + col1) of aggregate sum col1 of Q1;
let table xy := compute (1 + colsum) of aggregate sum col1 as colsum of Q1;
let table xxy := compute (1 + colsum) as colwhatever of aggregate sum col1 as colsum of Q1;
}

====

// Action Lambdas
let action x := \(x : String) -> @com.twitter.post(status=x);

====

// Lambdas Join
{
let table macro := \(number : Number) -> @com.xkcd.get_comic(number=number) ;
now => Q1 join macro() on (number=steps) => notify;
}

====

// Entities
{
  // allow spaces in entity types
  let table x1 := \(y : Entity(tt : hashtag)) -> @com.twitter.home_timeline(), contains(hashtags, y);

  // allow dots in entity types
  let table x2 := \(y : Entity(com.google.drive : file_id)) -> @com.google.drive.list_drive_files(), file_id == y;
  let table x3 := \(y : Entity(com.google . drive : file_id)) -> @com.google.drive.list_drive_files(), file_id == y;

  now => x1(y="foo"^^ tt : hashtag) => notify;
  now => x2(y="xxx"^^ com . google . drive : file_id ( "Some file" ) ) => notify;
}

====
// ** typecheck: expect TypeError **
// number is not a valid field in @com.xkcd.get_comic()
// Monitor on param

{
monitor @com.xkcd.get_comic() => notify;
monitor @com.xkcd.get_comic() on new [title] => notify;
monitor @com.xkcd.get_comic() on new [title, number] => notify;
}

====
// ** typecheck: expect TypeError **
// No $events
{
now => @com.twitter.post(status=$event);
}

====
// Join with parameter passing
{
((monitor @com.wsj.get()) join @com.yandex.translate.translate() on (text=$event)) => notify;
}

====
// Currencies
{
now => @com.uber.price_estimate(start=$context.location.home,end=$context.location.work) => notify;
now => @com.uber.price_estimate(start=$context.location.home,end=$context.location.work), low_estimate >= makeCurrency(50,usd) => notify;
}

====

{
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => notify;
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => notify;
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => @com.twitter.post(status=title);
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => @com.twitter.post(status=title);
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => @com.twitter.post(status=description);
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => @com.twitter.post(status=description);
}

====
// Bug 1
{
   now => @com.yandex.translate.translate(target_language="it"^^tt:iso_lang_code("Italian")) => notify;
}

====
// Bug 2
{
now => @com.twitter.my_tweets() join @com.bing.web_search() on (query=text) => notify ;
}

====
// Bug 3
{
let action x := \(p_status :String) -> @com.twitter.post(status=p_status);
}

====
// Bug 4
now => @security-camera.set_power(power=enum(on));

====

// ** typecheck: expect TypeError **
now => notify; 

====

let action x := \(status : String) -> @com.twitter.post(status=status);

====

// ** typecheck: expect TypeError **
let action x := \(status : Number) -> @com.twitter.post(status=status);

====

now => @com.twitter.follow(user_name=null^^tt:username("donald trump"));

====

// class definitions and import stmts
{
  class @com.foo {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.discovery.bluetooth(uuids=[]);

    monitorable query get_power(out power : Enum(on, off))
    #_[canonical='power status of foo']
    #_[confirmation='status of foo']
    #[poll_interval=10min];

    action set_power(in req power : Enum(on,off) #_[prompt='do you want turn on or off?'])
    #_[canonical='set power of foo']
    #_[confirmation='turn $power foo'];
  }
}

====

{
  class @com.foo {
    list query get_random_number(out number : Number)
    #_[canonical='get random number']
    #_[confirmation='random number'];
  }
}

====

// ** typecheck: expect TypeError **
// invalid value type for poll interval
{
  class @com.foo {
    monitorable query get_power(out power : Enum(on, off))
    #_[canonical='power status of foo']
    #_[confirmation='status of foo']
    #[poll_interval=10];
  }
}

====

// ** typecheck: expect TypeError **
// invalid value type for natural language annotations
{
  class @com.foo {
    list query get_random_number(out number : Number)
    #_[canonical='get random number']
    #_[confirmation='random number']
    #_[foo=10];
  }
}

====

// ** typecheck: expect TypeError **
// action is not monitorable
{
  class @com.foo {
    monitorable action set_power(in req power : Enum(on,off) #_[prompt='do you want turn on or off?'])
    #_[canonical='set power of foo']
    #_[confirmation='turn $power foo'];
  }
}

====

// ** typecheck: expect TypeError **
// action cannot have output parameter
{
  class @com.foo {
    action set_power(in req power : Enum(on,off), out result : String)
    #_[canonical='set power of foo']
    #_[confirmation='turn $power foo'];
  }
}

====

// prompt for output argument
{
  class @com.foo {
    list query get_random_number(out number : Number #_[prompt='what number?'])
    #_[canonical='get random number']
    #_[confirmation='random number'];
  }
}

====

// Mixins 1
{
  class @com.foo {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.custom_oauth();
  }
}

====

// Mixins 2
{
  class @com.foo {
    import loader from @org.thingpedia.generic_rest.v1();
    import config from @org.thingpedia.config.oauth2(client_id="xxx", client_secret="yyy");
  }
}

====

// ** typecheck: expect TypeError **
// invalid mixin
{
  class @com.foo {
    import loader from @org.thingpedia.v3();
  }
}

====

// ** typecheck: expect TypeError **
// invalid parameter for mixin
{
  class @com.foo {
    import loader from @org.thingpedia.v2(foo='bar');
  }
}

====

// ** typecheck: expect TypeError **
// missing required parameter for mixin
{
  class @com.foo {
    import loader from @org.thingpedia.config.discovery.bluetooth();
  }
}

====

// Map type
{
  class @com.foo {
    import loader from @org.thingpedia.config.form(params=makeArgMap(url:String, password:Password));
  }
}

====

// Dataset language
dataset @com.twitter language 'en' {
    stream (p_author : Entity(tt:username)) := monitor (@com.twitter.search()), author == p_author
    #_[utterances=['monitor ${p_author}\'s tweets']];

    query := @com.twitter.search()
    #_[utterances=['tweets', 'post on twitter']];

    program := {
        monitor (@com.twitter.search()) => notify;
    }
    #_[utterances=['notify me about new tweets']];
}

====

// ** typecheck: expect TypeError **
// wrong type
dataset foo {
    stream (p_author : Number) := monitor (@com.twitter.search()), author == p_author
    #_[utterances=['monitor ${p_author}\'s tweets']];
}

====

// Meta language
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.send()
    #_[utterances=['send']];

    program := {
       now => @foo.send();
   }
   #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// Meta language 2
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @bar.send()
    #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// Meta language 3
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.follow()
    #_[utterances=['follow']];
}

====

// Meta language: class annotations
class @foo
#_[name='Foo']
#_[description='Bar'] {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.send()
    #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// duplicate import
class @com.foo {
    import loader from @org.thingpedia.config.discovery.bluetooth(uuids=["foo"]);
    import loader from @org.thingpedia.config.form(params=makeArgMap(url:String));
}

====

// class extends
class @com.foo extends @com.twitter {}

====

// class extends
class @com.foo extends @com.twitter, @com.facebook {}

====

// Examples with annotations
dataset @foo {
    action () := @com.twitter.follow()
    #_[utterances='follow somebody on Twitter']
    #_[preprocessed='follow somebody on twitter'];

    action (p_status : String) := @com.twitter.post(status=p_status)
    #_[utterances=['post ${p_status} on Twitter']]
    #_[preprocessed=['post ${p_status} on twitter']]
    #[id=1234];

    query := @com.twitter.home_timeline()
    #[id=1235] #[click_count=7];

    query := @com.twitter.direct_messages()
    #[id=1236] #[arbitrary='stri\ng'] #[arbitrary_number=42];
}

====

// formatted output
class @foo {
    query get(out title : String, out url : URL)
    #_[canonical='send a number']
    #_[confirmation='send $bar']
    #_[formatted=['Here is something for you', { type='rdl', displayTitle='$title', webCallback='$url' } ]];
}

====
// Generated from Thingpedia, part of the Thingpedia tests
dataset @org.thingpedia.dynamic.by_kinds.org_thingpedia_builtin_test language "en" {
    action  := @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["eat some data"]]
        #_[preprocessed=["eat some data"]]
        #[id=1000] #[click_count=0];
    query (p_size :Measure(byte)) := @org.thingpedia.builtin.test.get_data(size=p_size)
        #_[utterances=["get some data"]]
        #_[preprocessed=["get some data"]]
        #[id=1001] #[click_count=0];
    program := monitor (@org.thingpedia.builtin.test.get_data()) => @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["keep eating data!"]]
        #_[preprocessed=["keep eating data !"]]
        #[id=1002] #[click_count=0];
    program := monitor (@org.thingpedia.builtin.test.get_data()) => @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["keep eating data! (v2)"]]
        #_[preprocessed=["keep eating data ! -lrb- v2 -rrb-"]]
        #[id=1003] #[click_count=0];
    action (p_data : String) := @org.thingpedia.builtin.test.eat_data(data=p_data)
        #_[utterances=["more data eating..."]]
        #_[preprocessed=["more data eating ..."]]
        #[id=1004] #[click_count=0];
    query  := @org.thingpedia.builtin.test.get_data()
        #_[utterances=["more data genning..."]]
        #_[preprocessed=["more data genning ..."]]
        #[id=1005] #[click_count=0];
}

dataset @org.thingpedia.dynamic.by_key.eat language "en" {
    action  := @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["eat some data"]]
        #_[preprocessed=["eat some data"]]
        #[id=1000] #[click_count=0];
}

====

// ** typecheck: expect TypeError **
// Invalid type
class @foo {
  action foo (in req arg : Invalid);
}

====

// ** typecheck: expect TypeError **
// Invalid type 2
let action foo := \(arg : Invalid) -> @com.twitter.post();

====

// explicit double quotes in formatted
class @com.foo {
  list query foo(out foo : String,
                 out bar : String)
  #_[formatted=[{type="text", text="\"${foo}\": ${bar}"}]];
}

====

// abstract class
abstract class @com.foo {
  list query foo(out foo : String,
                 out bar : String);
}

====

// ** typecheck: expect TypeError **
// no loader or config for abstract class
abstract class @com.foo {
  import loader from @org.thingpedia.config.none();
  list query foo(out foo : String,
                 out bar : String);
}

====

timer(base=makeDate(), interval=30s) => @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=2, high=20) => notify;

====

dataset @com.github language 'en' {
  stream (p :Entity(tt:path_name), u: Entity(tt:username))  := monitor (@com.github.get_pull_requests(repo_name=p)), contains(reviewers, u)
  #_[utterances=["review request for $u in repo $p"]];
}